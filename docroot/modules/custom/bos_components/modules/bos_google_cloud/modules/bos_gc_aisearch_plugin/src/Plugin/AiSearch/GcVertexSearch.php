<?php

namespace Drupal\bos_gc_aisearch_plugin\Plugin\AiSearch;

use Drupal\bos_google_cloud\Services\GcAuthenticator;
use Drupal\bos_google_cloud\Services\GcBigQuery;
use Drupal\bos_google_cloud\Services\GcSearch;
use Drupal\bos_search\AiSearch;
use Drupal\bos_search\AiSearchBase;
use Drupal\bos_search\Model\AiSearchCitation;
use Drupal\bos_search\AiSearchInterface;
use Drupal\bos_search\Model\AiSearchReference;
use Drupal\bos_search\Model\AiSearchRequest;
use Drupal\bos_search\Model\AiSearchResponse;
use Drupal\bos_search\Model\AiSearchResult;
use Drupal\bos_search\Annotation\AiSearchAnnotation;
use Drupal\bos_search\Twig\CustomFiltersExtension;

/**
 * Provides an 'AiSearch' plugin for bos_google_cloud.
 *
 * @AiSearchAnnotation (
 *   id = "Vertex Search",
 *   service = "bos_google_cloud.GcSearch",
 *   description = "Plugin for Google Cloud Vertex Search Service."
 * )
 */
class GcVertexSearch extends AiSearchBase implements AiSearchInterface {

  private const NO_RESULTS = "No Results Reported";

  /** @injectDoc */
  public function __construct(array $configuration, $plugin_id, $plugin_definition) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
  }

  /**
   * @inheritDoc
   */
  public function search(AiSearchRequest $request, bool $fake = FALSE): AiSearchResponse {
    try {
      // Ask the search question to Vertex.
      $preset = $request->get("preset") ?? [];

      if ($fake) {
        $response = $this->fakeResponse();
      }
      else {
        $parameters = [
          "text" => $request->get("search_text") ?? "",
          "allow_conversation" => $preset["searchform"]["searchbar"]["allow_conversation"] ?? FALSE,
          "session_id" => $request->get("session_id") ?? "",
          "prompt" => $preset["prompt"] ?? 'default',
          "extra_prompt" => 'If you cannot understand the question or the question cannot be answered, start the response with the text "' . self::NO_RESULTS . '"',
          "metadata" => $preset["results"]["metadata"] ?? 0,
          "num_results" => $preset["results"]["result_count"] ?? 0,
          "include_citations" => $preset["results"]["citations"] ?? 0,
          "related_questions" => $preset["results"]["related_questions"] ?? 0,
          "engine_mds" => (($preset["model_tuning"]["overrides"]["engine_mds"] ?? "true") == "true"),
          "safe_search" => $preset["model_tuning"]['search']["safe_search"] ?? 0,
          "ignoreAdversarialQuery" => $preset["model_tuning"]['summary']["ignoreAdversarialQuery"] ?? 0,
          "ignoreNonSummarySeekingQuery" => $preset["model_tuning"]['summary']["ignoreNonSummarySeekingQuery"] ?? 0,
          "ignoreLowRelevantContent" => $preset["model_tuning"]['summary']["ignoreLowRelevantContent"] ?? 0,
          "ignoreJailBreakingQuery" => $preset["model_tuning"]['summary']["ignoreJailBreakingQuery"] ?? 0,
          "semantic_chunks" => $preset["model_tuning"]['summary']["semantic_chunks"] ?? 0,
        ];

        // Apply any service overrides.
        if (!empty($preset["model_tuning"]["overrides"]["service_account"]) && $preset["model_tuning"]["overrides"]["service_account"] != "default") {
          $parameters["service_account"] = $preset["model_tuning"]["overrides"]["service_account"];
          $this->service->setServiceAccount($parameters["service_account"]);
        }

        if (!empty($preset["model_tuning"]["overrides"]["project_id"]) && $preset["model_tuning"]["overrides"]["project_id"] != "default") {
          $parameters["project_id"] = $preset["model_tuning"]["overrides"]["project_id"];
        }

        if (!empty($preset["model_tuning"]["overrides"]["datastore_id"]) && $preset["model_tuning"]["overrides"]["datastore_id"] != "default") {
          // At the moment we are not allowing users to specify a DataStore.
          // We are always using the default datastores defined in the engine.
          // This block is redundant and only left in case we enable overrides.
          $parameters["datastore_id"] = $preset["model_tuning"]["overrides"]["datastore_id"];
          if (is_array($preset["model_tuning"]["overrides"]["datastore_id"])) {
            foreach ($parameters["datastore_id"] as &$ds) {
              $ds = $this->service->fqDataStorename($parameters["project_id"], $ds);
            }
          }
          else {
            $parameters["datastore_id"] = [$this->service->fqDataStorename($parameters["project_id"], $preset["model_tuning"]["overrides"]["datastore_id"])];
          }
        }

        if (!empty($preset["model_tuning"]["overrides"]["engine_id"]) && $preset["model_tuning"]["overrides"]["engine_id"] != "default") {
          $parameters["engine_id"] = $preset["model_tuning"]["overrides"]["engine_id"];
        }

        if (!empty($preset["model_tuning"]["overrides"]["model"]) && $preset["model_tuning"]["overrides"]["model"] != "default") {
          $parameters["model"] = $preset["model_tuning"]["overrides"]["model"];
        }

        // Set multi-datastore requirements.
        if (!empty($preset["model_tuning"]["overrides"]["engine_mds"] == "true")) {
          // If this is a multi-datastore dataset, cannot have safe_search.
          $parameters["safe_search"] = FALSE;
        }

        // Query the Agent Builder.
        $response = $this->service->execute($parameters);

      }
    }
    catch (\Exception $e) {
      throw new \Exception($e->getMessage());
    }

    // Load the SearchResponse object into the AiSearchResponse object.
    if ($response) {
      $output = $this->loadSearchResponse($this->getService()->response(), $preset, $request);
    }

    // Send the search data to BQ.
    $this->updateBq($request, $output);

    return $output;
  }

  /**
   * @inheritDoc
   */
  public function hasFollowUp(): bool {
    return $this->service->hasFollowup();
  }

  /**
   * @inheritDoc
   */
  public function availablePrompts(): array {
    return $this->service->availablePrompts();
  }

  /**
   * Loads a GoogleCloud SearchResponse object.
   *
   * Uses a standardized AiSearchResponse object which can be consumed by
   * bos_search.
   *
   * @param array $fullResponse
   * @param $preset
   * @param \Drupal\bos_search\AiSearchRequest $request
   *
   * @return AiSearchResponse
   *
   * @see bos_google_cloud/src/Apis/v1alpha/SearchResponse.php
   * @see bos_search/src/AiSearchResponse.php
   */
  private function loadSearchResponse(array $fullResponse, $preset, AiSearchRequest $request): AiSearchResponse {

    $searchResponse = $fullResponse["object"]->toArray();

    $aiSearchResponse = new AiSearchResponse($request, $searchResponse["summary"]["summaryText"], $this->service->getSessionInfo()["session_id"] ?? "");

    // Load any citations.
    if ($preset["results"]["citations"] && !empty($searchResponse["summary"]["summaryWithMetadata"]["citationMetadata"]["citations"])) {
      $this->loadCitations($aiSearchResponse, $searchResponse, $preset);
    }

    // Load any results.
    if ($preset["results"]["searchresults"] && !empty($searchResponse["results"])) {
      $this->loadSearchResults($aiSearchResponse, $searchResponse, $preset);
    }

    // [optional] Resolve Search Results into a node and check.
    if ($preset["results"]["searchresults"] && !empty($searchResponse["results"])) {
      $this->postProcessResults($aiSearchResponse);
    }

    if (str_starts_with(trim($searchResponse["summary"]["summaryText"]), self::NO_RESULTS)) {
      $aiSearchResponse->set("no_results", TRUE);
    }
    else {
      $aiSearchResponse->set("body", $searchResponse["summary"]["summaryText"]);
    }

    // Load the metadata from the SearchResponse and extend with preset info.
    if ($preset["results"]["metadata"]) {
      $metadata = array_merge($fullResponse["metadata"], ["Search Presets" => $preset]);
      $metadata = $this->flattenMetadata($metadata);

      // Reformat a bit for display.
      foreach ($metadata as &$metadatum) {
        foreach ($metadatum as $field => $value) {
          $field_parts = explode(".", $field);
          if (count($field_parts) > 1) {
            $new_field = $field_parts[0];
            $counter = 0;
            foreach (array_slice($field_parts, 1) as $part) {
              $new_field .= "<br>" . str_repeat("&nbsp;", $counter += 2) . "-$part";
            }
            $metadatum[$new_field] = $value;
            unset($metadatum[$field]);
          }
        }
      }

      $aiSearchResponse->set("metadata", $metadata);
    }

    return $aiSearchResponse;

  }

  /**
   * Load the GCSearchResults into AiSearchResponse format for Search Results.
   *
   * Also mark where results are duplicated in the list of references.
   *
   * @param AiSearchResponse $aiSearchResponse Search response object.
   * @param array $searchResponse Array of values to load.
   * @param array $preset The preset for this plugin.
   */
  private function loadSearchResults(AiSearchResponse &$aiSearchResponse, array $searchResponse, array $preset):void {

    $references = $aiSearchResponse->getReferences();
    $hasCitations = $preset["results"]["citations"];
    $noDupCitation = $preset["results"]["no_dup_citations"];

    foreach ($searchResponse["results"] as $search_result) {
      $ds = $search_result["document"]["derivedStructData"];
      $title = explode("|", $ds["htmlTitle"], 2)[0];
      $res = new AiSearchResult($title, $ds["link"], $ds["snippets"][0]["snippet"] ?: "");
      $docid = $search_result["id"];

      $filter = new CustomFiltersExtension();
      $content = $ds["extractive_answers"][0]["content"] ?: FALSE;
      if ($filter->hasNonEnglishChars($content) || !$content) {
        // If the selected content string contains non-english content, then
        // try the alternative extractive output.
        $content = $ds["extractive_segments"][0]["content"] ?: FALSE;
        if ($filter->hasNonEnglishChars($content) || !$content) {
          // Still not english content, so set to empty string and the
          // postProcessResults() will inject summary content from the node.
          $content = "";
        }
      }

      $res->set("id", $docid)
        ->set("link_title", explode("|", $ds["title"], 2)[0])
        ->set("ref", $search_result["document"]["name"])
        ->set("content", $content)
        ->set("description", "")
        ->set("is_citation", FALSE);

      // Check if this result is also in the citations (references) list.
      if ($hasCitations) {
        foreach ($references as $reference) {
          $refdoc = explode("/", $reference["ref"]);
          $refdocid = array_pop($refdoc);
          if ($docid == $refdocid) {
            $res->set("is_citation", TRUE);
            break;
          }
        }
      }

      // Actually load this Result.
      if ($noDupCitation) {
        if (!$res->get("is_citation")) {
          // If not loading results which are also citations
          // and this result is not also a citation, then load.
          $aiSearchResponse->addResult($res);
        }
      }
      else {
        // If we are allowing results which are also citations
        // then load.
        $aiSearchResponse->addResult($res);
      }
    }
  }

  /**
   * Load GCSearchResults into AiSearchResponse fmt for Citation & References.
   *
   * Also mark where references are duplicated in the list of search results.
   *
   * @param \Drupal\bos_search\Model\AiSearchResponse $aiSearchResponse
   * @param array $searchResponse
   * @param array $preset
   *
   * @return void
   */
  private function loadCitations(AiSearchResponse &$aiSearchResponse, array $searchResponse, array $preset):void {

    $citations = $searchResponse['summary']['summaryWithMetadata']['citationMetadata']['citations'];
    $references = $searchResponse["summary"]["summaryWithMetadata"]["references"];

    // Cycle through references and deduplicate them.
    // Update Citation source when a duplicate is found so ref is not lost.
    $refs = [];
    foreach ($references as $ref_key => $reference) {
      $docId = GcSearch::readDocumentPath($reference["document"])['documents'];
      if (array_key_exists($docId, $refs)) {
        // Need to deduplicate and update Citation.
        $first_instance = $refs[$docId];
        foreach ($citations as &$citation) {
          foreach ($citation["sources"] as &$source) {
            if ($source["referenceIndex"] == $ref_key) {
              $source["referenceIndex"] = intval($first_instance);
            }
          }
        }
      }
      else {
        $refs[$docId] = $ref_key;
      }
    }

    // Cycle through the Citations, and load them into aiSearchResponse.
    foreach ($citations as $citation_key => $citation) {

      $start_index = $citation['startIndex'] ?? 0;
      $end_index = $citation['endIndex'] ?? strlen($aiSearchResponse->get("body"));
      $searchCitation = new AiSearchCitation($start_index, $end_index);

      // Get find the relevance score for each source (Reference) and only
      // save the source if it is the only one, or if it is above the threshold
      // set in the preset.
      foreach ($citation['sources'] as $cit_source_key => $source) {
        $sourceReference = $references[$source["referenceIndex"]];
        if (count($citation['sources']) == 1
          || $sourceReference["extraInfo"]["relevanceScore"] >= $preset["results"]["min_citation_relevance"]) {
          $source["relevanceScore"] = $sourceReference["extraInfo"]["relevanceScore"];
          $searchCitation->addSource($source, $cit_source_key);
        }
      }
      $aiSearchResponse->addCitation($searchCitation, $citation_key);

    }

    // Now reload only  the citations that are loaded into aiSearchResponse,
    // and update the referenceIndex with the new ID's.
    $citations = $aiSearchResponse->getCitations();

    // Cycle through the References and load them into aiSearchResponse.
    $idx = 0;
    foreach ($references as $reference_key => $reference) {

      $title = explode("|", $reference["title"], 2)[0];
      $searchReference = new AiSearchReference($title, $reference["uri"], $reference["document"]);
      $searchReference->addChunkContent($reference["chunkContents"]["content"], $reference["chunkContents"]["pageIdentifier"] ?? "");
      $docId = explode("/", $reference["document"]);
      $searchReference->set("id", array_pop($docId));
      $searchReference->set("relevanceScore", $reference["extraInfo"]["relevanceScore"]);

      // Find Citations which use this Reference and add in the location (char
      // range) for the Summary Annotation.
      foreach ($citations as $citation) {
        $locations = [];
        foreach ($citation["sources"] as $source) {
          if ($source["referenceIndex"] == $reference_key) {
            $locations[] = [
              "startIndex" => $citation["startIndex"] ?? 0,
              "endIndex" => $citation["endIndex"] ?? strlen($aiSearchResponse->get("body")),
            ];
            break;
          }
        }
        $searchReference->set("locations", $locations);
      }

      // Set a flag if this Reference is used in any SearchResults.
      $searchReference->set("is_result", FALSE);
      foreach ($searchResponse["results"] as $result) {
        if ($result["id"] == $searchReference->get("id")) {
          $searchReference->set("is_result", TRUE);
          break;
        }
      }

      // Only load this Reference if it has a location in the Citation.
      // Some references are returned which do not have citations, presumably
      // because they were used in drafts, or the citation limit means the
      // Citation did not appear in the final listing returned by the API.
      if (count($searchReference->get("locations"))) {
        $idx++;
        $searchReference->set("original_seq", $reference_key);
        $searchReference->set("seq", $idx);
        $aiSearchResponse->addReference($searchReference, $idx);

        // Update the Citations with the newly set referenceIndex ($idx).
        $citation_collection = $aiSearchResponse->getCitationsCollection();
        foreach ($citation_collection->getCitations() as $cit_key => $citation) {
          foreach ($citation["sources"] as &$source) {
            if ($source["referenceIndex"] == $reference_key) {
              // Use a negative number so we don't end up with this being
              // overwritten on another pass though the loop.
              $source["referenceIndex"] = -$idx;
            }
          }
          $citation_collection->updateCitation($citation, $cit_key);
        }

      }

    }
    // Remove any negative ReferenceIndexes created above.
    foreach ($citation_collection->getCitations() as $cit_key => $citation) {
      foreach ($citation["sources"] as &$source) {
        if (intval($source["referenceIndex"]) < 0) {
          $source["referenceIndex"] = abs(intval($source["referenceIndex"]));
        }
      }
      $citation_collection->updateCitation($citation, $cit_key);
    }

    // Make sure the Citations are indexed correctly.
    $references = $aiSearchResponse->getReferences();
    $citations = $aiSearchResponse->getCitations();

    // Add Annotations to the summary Text, for Citations and References
    // that remain. Copy the original summary to "body" and save the annotated
    // summary.
    $summary = $searchResponse["summary"]["summaryWithMetadata"]["summary"];
    $aiSearchResponse->set("body", $summary);

    foreach ($citations as $citation) {
      $text = substr($summary, $citation["startIndex"], ($citation["endIndex"] - $citation["startIndex"]));
      $citation_collection = [];
      // Check the sources, de-duplicating them using the referenceIndex.
      foreach ($citation["sources"] as $cit_source) {
        if ($cit_source["referenceIndex"] === "0") {
          // @todo why do we get $cit_source["referenceIndex"] = "0"??
          $a = 1;
        }
        else {
          $citation_collection[$cit_source["referenceIndex"]] = $cit_source["referenceIndex"];
        }
      }
      ksort($citation_collection, SORT_NUMERIC);
      $citation_collection = implode(",", array_keys($citation_collection));
      $text = trim($text);
      if (substr($text, -1) == ".") {
        $summaryParts[] = substr($text, 0, -1) . " [$citation_collection]. ";
      }
      else {
        $summaryParts[] = $text . " [$citation_collection] ";
      }
    }
    $summary = implode("", $summaryParts);
    $aiSearchResponse->set("summary", $summary);

  }

  /**
   * Post-processes the search results to enhance content.
   *
   *  - Finding the nid for the node.
   *  - Checking language of page.
   *  - Loading the Drupal summary for content.
   *
   * @param AiSearchResponse $aiSearchResponse
   *   The response object containing the initial search results.
   *
   * @return void
   *   This method does not return a value but modifies the results directly.
   */
  private function postProcessResults(AiSearchResponse $aiSearchResponse):void {

    $results = $aiSearchResponse->getResultsCollection();

    $alias_manager = \Drupal::service('path_alias.manager');
    $redirect_manager = \Drupal::service('redirect.repository');

    foreach ($results->getResults() as $key => $result) {

      // The content field may be empty if either: the AI did not return an
      // extractive_answer or an extractive_segment (unlikely) or if both have
      // non-english chars in them. If content is empty, then find the node and
      // extract a summary from the body of the content.
      if (empty($result->get('content'))) {

        $path_alias = explode(".gov", $result->get("link"), 2)[1];

        if (!empty($path_alias)) {
          // Strip out the alias from any other querystings etc.
          $path_alias = explode('?', $path_alias, 2);
          $path_alias = explode('#', $path_alias[0], 2)[0];

          // Get the nid for this page alias (to prevent duplicates).
          $path = $alias_manager->getPathByAlias($path_alias);
          $path_parts = explode('/', $path);
          $nid = array_pop($path_parts);

          if (!is_numeric($nid)) {
            // If we can't get the node ID then it is possibly a redirect to
            // another page, so try to track that down...
            $nid = NULL;
            $redirects = $redirect_manager->findBySourcePath(trim($path_alias, "/"));
            if (!empty($redirects)) {
              $redirect = reset($redirects);
              $original_alias = explode(":", $redirect->getRedirect()['uri'], 2)[1] ?? $redirect->getRedirect()['uri'];
              $path = $alias_manager->getPathByAlias($original_alias);
              $path_parts = explode('/', $path);
              $nid = array_pop($path_parts);
            }
          }

          if ($nid) {
            $node = \Drupal::entityTypeManager()
              ->getStorage('node')
              ->load($nid);

            $content = "";
            // Build up a summary.
            if ($node && $node->hasField("field_intro_text")) {
              $content .= $node->get("field_intro_text")->value;
            }
            if ($node && $node->hasField("body")) {
              $content .= ($node->get("body")->summary ?: $node->get("body")->value);
            }
            if ($node && $node->hasField("field_need_to_know")) {
              $content .= $node->get("field_need_to_know")->value;
            }

            // Update the result.
            $result->set("nid", $nid);
            $result->set("content", AiSearch::sanitize(strip_tags($content)));
            $results->updateResult($key, $result);

          }
        }
      }
    }

  }

  /**
   * @param array &$elements
   * @param array $map
   * @param array $exclude_elem
   * @param string $prefix *
   *
* @inheritDoc
   */
  protected function flattenMetadata(array &$metadata, array $map = [], array $exclude_elem = []): array {
    $map = [];
    $exclude_elem = [
      "headers.Authorization",
      "answer_response_raw",
      "response_raw",
    ];
    return parent::flattenMetadata($metadata, $map, $exclude_elem);
  }

  /**
   * Generates a fake response for the search functionality.
   *
   * This method is used primarily for testing and development
   * purposes. It simulates a response that would come from the
   * search service, allowing developers to test the flow and
   * interaction without requiring a live service connection.
   *
   * @return AiSearchResponse A simulated search response.
   */
  private function fakeResponse() {
//    $a = base64_decode("");
    $a = base64_decode("");
    return unserialize($a);
  }

  /**
   * Updates Google BigQuery with event data from search request and response.
   *
   * @param \Drupal\bos_search\Model\AiSearchRequest $request
   *   Contains the search request details.
   * @param \Drupal\bos_search\Model\AiSearchResponse $response
   *   Contains the search response details including metadata, summary,
   *   references, and results.
   *
   * @return void
   *   Nothing returned - record created and inserted into BQ.
   */
  private function updateBq(AiSearchRequest $request, AiSearchResponse $response): void {

    $svs_account = array_flip(GcAuthenticator::SVS_ACCOUNT_LIST);

    $sa = $this->getService()->getSettings()["service_account"];
    if ($request->get("preset")["model_tuning"]["overrides"]["service_account"] != "default") {
      $sa = $request->get("preset")["model_tuning"]["overrides"]["service_account"];
    }
    $project = $this->getService()->getSettings()["project_id"];
    if ($request->get("preset")["model_tuning"]["overrides"]["project_id"] != "default") {
      $project = $request->get("preset")["model_tuning"]["overrides"]["project_id"];
    }
    $bq = new GcBigQuery(
      $svs_account[$sa],
      $project,
      "AISearch");

    // Fetch the basic event record schema.
    if ($record = $bq->getGa4EventBody()) {
      // Populate the record.
      $record["event_name"] = "form_submit";
      $record["event_params"][] = [
        "key" => "source",
        "value" => ["string_value" => "GcVertexSearch.php"],
      ];
      $record["event_params"][] = [
        "key" => "form_id",
        "value" => ["string_value" => $request->get("form_id")],
      ];
      $record["event_params"][] = [
        "key" => "question",
        "value" => ["string_value" => $request->get("search_text")],
      ];
      $record["event_params"][] = [
        "key" => "answer",
        "value" => ["string_value" => $response->get("summary")],
      ];
      foreach ($response->getReferences() as $key => $reference) {
        $record["event_params"][] = [
          "key" => "citation.{$key}.page",
          "value" => ["string_value" => $reference["title"]],
        ];
        $record["event_params"][] = [
          "key" => "citation.{$key}.link",
          "value" => ["string_value" => $reference["uri"]],
        ];
      }
      foreach ($response->getResults() as $key => $result) {
        $record["event_params"][] = [
          "key" => "result.{$key}.page",
          "value" => ["string_value" => $result->get("title")],
        ];
        $record["event_params"][] = [
          "key" => "result.{$key}.link",
          "value" => ["string_value" => $result->get("link")],
        ];
      }
      $bq->insertRow("events", $record);
    }

  }

}
